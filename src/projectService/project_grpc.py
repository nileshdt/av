# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: project.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import project_pb2


class ProjectSvcBase(abc.ABC):

    @abc.abstractmethod
    async def createProject(self, stream: 'grpclib.server.Stream[project_pb2.CreateProjectRequest, project_pb2.ProjectResponse]') -> None:
        pass

    @abc.abstractmethod
    async def createTag(self, stream: 'grpclib.server.Stream[project_pb2.CreateTagRequest, project_pb2.TagResponse]') -> None:
        pass

    @abc.abstractmethod
    async def getProject(self, stream: 'grpclib.server.Stream[project_pb2.GetProjectRequest, project_pb2.ProjectResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/demo_project.ProjectSvc/createProject': grpclib.const.Handler(
                self.createProject,
                grpclib.const.Cardinality.UNARY_UNARY,
                project_pb2.CreateProjectRequest,
                project_pb2.ProjectResponse,
            ),
            '/demo_project.ProjectSvc/createTag': grpclib.const.Handler(
                self.createTag,
                grpclib.const.Cardinality.UNARY_UNARY,
                project_pb2.CreateTagRequest,
                project_pb2.TagResponse,
            ),
            '/demo_project.ProjectSvc/getProject': grpclib.const.Handler(
                self.getProject,
                grpclib.const.Cardinality.UNARY_UNARY,
                project_pb2.GetProjectRequest,
                project_pb2.ProjectResponse,
            ),
        }


class ProjectSvcStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.createProject = grpclib.client.UnaryUnaryMethod(
            channel,
            '/demo_project.ProjectSvc/createProject',
            project_pb2.CreateProjectRequest,
            project_pb2.ProjectResponse,
        )
        self.createTag = grpclib.client.UnaryUnaryMethod(
            channel,
            '/demo_project.ProjectSvc/createTag',
            project_pb2.CreateTagRequest,
            project_pb2.TagResponse,
        )
        self.getProject = grpclib.client.UnaryUnaryMethod(
            channel,
            '/demo_project.ProjectSvc/getProject',
            project_pb2.GetProjectRequest,
            project_pb2.ProjectResponse,
        )
