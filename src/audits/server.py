import asyncio
import os
import datetime
from grpclib.utils import graceful_exit
from grpclib.server import Server, Stream

from pymongo import MongoClient
# generated by protoc
from audit_pb2 import GetAuditRequest, GetAuditResponse, GetAuditsRequest, GetAuditsResponse, CreateAuditRequest, CreateAuditResponse, UpdateAuditRequest, UpdateAuditResponse, DeleteAuditRequest, DeleteAuditResponse
from audit_grpc import AuditsBase


# MYSQL_HOST = 'localhost'
# MYSQL_DB = 'auth'
# MYSQL_USER = 'auth_user'
# MYSQL_PASSWORD = 'Auth123'
# MYSQL_PORT = '3306'
MONGODB_HOST = os.environ.get("MONGODBHOST", "mongodb://localhost:27017/")
MONGODB_USER = os.environ.get("MONGODB_USER", "auth_user")
MONGODB_PASSWORD = os.environ.get("MONGODB_PASSWORD", "Auth123")
MONGODB_DB = os.environ.get("MONGODB_DB", "audit_manager")
MONGODB_COLLECTION = os.environ.get("MONGODB_COLLECTION", "audits")
MONGODB_PORT = os.environ.get("MONGODB_PORT", "27017")


client = MongoClient("mongodb://localhost:27017/")

# Get a reference to the "audit_manager" database
db = client[MONGODB_DB]

# Get a reference to the "audits" collection
audits_collection = db[MONGODB_COLLECTION]


class Audits(AuditsBase):

    async def CreateAudit(self, stream: Stream[CreateAuditRequest, CreateAuditResponse]) -> None:
        request = await stream.recv_message()
        assert request is not None
        if request.name == "" or request.data == "":
            await stream.send_message(CreateAuditResponse(status=401, message="Invalid data"))
        try:
            newAudit = {
                "name": request.name,
                "description": request.description,
                "type": request.type,
                "status": request.status,
                "data": request.data,
                "created_at": datetime.datetime.utcnow(),
                "created_by": request.created_by,
            }
            audits_collection.insert_one(newAudit)
            await stream.send_message(
                CreateAuditResponse(status=200, message="Audit created successfully"))
        except Exception as e:
            print(e)
            await stream.send_message(CreateAuditResponse(status=500, message="Internal error"))

    async def UpdateAudit(self, stream: Stream[UpdateAuditRequest, UpdateAuditResponse]) -> None:
        print("Register request received")
        request = await stream.recv_message()
        assert request is not None

        if request.name == "" or request.data == "":
            await stream.send_message(UpdateAuditResponse(status=400, message="name or data cannot be empty"))
            # Update the age of the customer with name "John Smith"
        audits_collection.update_one(
            {"id": request.id},
            {"$set": {"age": 31, "data": request.data, "name": request.name, "description": request.description, "type": request.type,
                      "status": request.status, "updated_at": datetime.datetime.utcnow(), "updated_by": request.updated_by}}
        )
        return await stream.send_message(UpdateAuditResponse(status=200, message="User created"))

    async def GetAudit(self, stream: Stream[GetAuditRequest, GetAuditResponse]) -> None:
        print("get audit")
        request = await stream.recv_message()
        assert request is not None

        if request.id == "":
            await stream.send_message(GetAuditResponse(status=400, message="id cannot be empty"))
            # Update the age of the customer with name "John Smith"
        audit = audits_collection.find_one({"id": request.id})
        return await stream.send_message(GetAuditResponse(status=200, message="Audit found", audit=audit))

    async def GetAudits(self, stream: Stream[GetAuditsRequest, GetAuditsResponse]) -> None:
        print("get audits")
        request = await stream.recv_message()
        assert request is not None

        if request.created_by == "":
            await stream.send_message(GetAuditsResponse(status=400, message="created_by cannot be empty"))
            # Update the age of the customer with name "John Smith"
        audits = audits_collection.find({"created_by": request.created_by})
        return await stream.send_message(GetAuditsResponse(status=200, message="Audits found", audits=audits))

    async def DeleteAudit(self, stream: Stream[DeleteAuditRequest, DeleteAuditResponse]) -> None:
        print("delete audit")
        request = await stream.recv_message()
        assert request is not None

        if request.id == "":
            await stream.send_message(DeleteAuditResponse(status=400, message="id cannot be empty"))
            # Update the age of the customer with name "John Smith"
        audits_collection.delete_one({"id": request.id})
        return await stream.send_message(DeleteAuditResponse(status=200, message="Audit deleted"))


async def main(*, host: str = '127.0.0.1', port: int = 50053) -> None:
    server = Server([Audits()])
    # Note: graceful_exit isn't supported in Windows
    with graceful_exit([server]):
        await server.start(host, port)
        print(f'Serving on {host}:{port}')
        await server.wait_closed()


if __name__ == '__main__':
    asyncio.run(main())
