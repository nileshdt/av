# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: audit.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import audit_pb2


class AuditsBase(abc.ABC):

    @abc.abstractmethod
    async def GetAudits(self, stream: 'grpclib.server.Stream[audit_pb2.GetAuditsRequest, audit_pb2.GetAuditsResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetAudit(self, stream: 'grpclib.server.Stream[audit_pb2.GetAuditRequest, audit_pb2.GetAuditResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateAudit(self, stream: 'grpclib.server.Stream[audit_pb2.CreateAuditRequest, audit_pb2.CreateAuditResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateAudit(self, stream: 'grpclib.server.Stream[audit_pb2.UpdateAuditRequest, audit_pb2.UpdateAuditResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteAudit(self, stream: 'grpclib.server.Stream[audit_pb2.DeleteAuditRequest, audit_pb2.DeleteAuditResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/audits.Audits/GetAudits': grpclib.const.Handler(
                self.GetAudits,
                grpclib.const.Cardinality.UNARY_UNARY,
                audit_pb2.GetAuditsRequest,
                audit_pb2.GetAuditsResponse,
            ),
            '/audits.Audits/GetAudit': grpclib.const.Handler(
                self.GetAudit,
                grpclib.const.Cardinality.UNARY_UNARY,
                audit_pb2.GetAuditRequest,
                audit_pb2.GetAuditResponse,
            ),
            '/audits.Audits/CreateAudit': grpclib.const.Handler(
                self.CreateAudit,
                grpclib.const.Cardinality.UNARY_UNARY,
                audit_pb2.CreateAuditRequest,
                audit_pb2.CreateAuditResponse,
            ),
            '/audits.Audits/UpdateAudit': grpclib.const.Handler(
                self.UpdateAudit,
                grpclib.const.Cardinality.UNARY_UNARY,
                audit_pb2.UpdateAuditRequest,
                audit_pb2.UpdateAuditResponse,
            ),
            '/audits.Audits/DeleteAudit': grpclib.const.Handler(
                self.DeleteAudit,
                grpclib.const.Cardinality.UNARY_UNARY,
                audit_pb2.DeleteAuditRequest,
                audit_pb2.DeleteAuditResponse,
            ),
        }


class AuditsStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetAudits = grpclib.client.UnaryUnaryMethod(
            channel,
            '/audits.Audits/GetAudits',
            audit_pb2.GetAuditsRequest,
            audit_pb2.GetAuditsResponse,
        )
        self.GetAudit = grpclib.client.UnaryUnaryMethod(
            channel,
            '/audits.Audits/GetAudit',
            audit_pb2.GetAuditRequest,
            audit_pb2.GetAuditResponse,
        )
        self.CreateAudit = grpclib.client.UnaryUnaryMethod(
            channel,
            '/audits.Audits/CreateAudit',
            audit_pb2.CreateAuditRequest,
            audit_pb2.CreateAuditResponse,
        )
        self.UpdateAudit = grpclib.client.UnaryUnaryMethod(
            channel,
            '/audits.Audits/UpdateAudit',
            audit_pb2.UpdateAuditRequest,
            audit_pb2.UpdateAuditResponse,
        )
        self.DeleteAudit = grpclib.client.UnaryUnaryMethod(
            channel,
            '/audits.Audits/DeleteAudit',
            audit_pb2.DeleteAuditRequest,
            audit_pb2.DeleteAuditResponse,
        )
